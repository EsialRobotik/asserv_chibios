name: Build All Robots

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        robot: [Princess, PAMI, PMI, PMX, Simu_F446, Simulation]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          openocd \
          binutils-arm-none-eabi \
          gcc-arm-none-eabi \
          libnewlib-arm-none-eabi \
          libstdc++-arm-none-eabi-newlib \
          gdb-multiarch

    - name: Build firmware for ${{ matrix.robot }}
      run: make ROBOT=${{ matrix.robot }} all

    - name: Set artifact name
      id: vars
      run: |
        echo "date=$(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
        echo "sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Upload firmware artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.robot }}-${{ steps.vars.outputs.date }}-${{ steps.vars.outputs.sha }}
        path: |
          src/Robots/${{ matrix.robot }}
        if-no-files-found: warn

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'

    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: release-assets

    - name: Create release tag
      id: tag
      run: |
        echo "RELEASE_TAG=$(date +'%Y-%m-%d')-${GITHUB_SHA::7}" >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        name: Firmware Release ${{ env.RELEASE_TAG }}
        body: |
          ðŸš€ Firmware build for all robots

          Robots:
          - Princess
          - PAMI
          - PMI
          - PMX
          - Simu_F446
          - Simulation
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload binaries to release
      run: |
        for dir in release-assets/*; do
          zip -r "${dir}.zip" "$dir"
          gh release upload "${{ env.RELEASE_TAG }}" "${dir}.zip" --clobber
        done
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
